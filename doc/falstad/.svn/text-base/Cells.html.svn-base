<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_24) on Wed Sep 26 08:32:21 EDT 2012 -->
<TITLE>
Cells
</TITLE>

<META NAME="date" CONTENT="2012-09-26">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Cells";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../falstad/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Cells.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../falstad/BSPNode.html" title="class in falstad"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../falstad/FirstPersonDrawer.html" title="class in falstad"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?falstad/Cells.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Cells.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
falstad</FONT>
<BR>
Class Cells</H2>
<PRE>
java.lang.Object
  <IMG SRC="../resources/inherit.gif" ALT="extended by "><B>falstad.Cells</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>Cells</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
This class encapsulates all access to a grid of cells. Each cell encodes whether walls or borders/bounds to rooms 
 or to the outer border of the maze exist.
 The class resulted from refactoring the int[][] cells area in the original Maze and Mazebuilder classes into a class of its own.
 The internal two-dimensional array matches with a grid of cells as follows:
 cells[0,y] form the left border, hence there is a wall on  left.
 cells[width-1,y] form the right border, hence there is a wall on right.
 cells[x,0] form the top border, hence there is a wall on top.
 cells[x,height-1] form the bottom border, hence there is a wall on bottom.
 The upper left corner is seen as position [0][0].
 
 Note that for a calculated maze, at least one cell on the border will have a missing wall for an exit somewhere.
 
 Walls and borders are separated concepts. A border is not removed by the maze generation procedure. It is used to mark 
 the outside border of the maze but also internal rooms. Walls can be taken down by the maze generation procedure.
 
 The internal encoding of walls for each cell into a single integer per cell is performed with bit operations (&,|) and 
 thus error prone. An encapsulation within this class localizes all bit operations for this encoding.
 
 This code is refactored code from Maze.java by Paul Falstad, www.falstad.com, Copyright (C) 1998, all rights reserved
 Paul Falstad granted permission to modify and use code for teaching purposes.
 Refactored by Peter Kemper
<P>

<P>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../falstad/Cells.html#Cells(int[][])">Cells</A></B>(int[][]&nbsp;target)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructor that dimensions and initializes cells with the values from the given matrix.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../falstad/Cells.html#Cells(int, int)">Cells</A></B>(int&nbsp;w,
      int&nbsp;h)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructor</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#addBoundWall(int, int, int, int)">addBoundWall</A></B>(int&nbsp;x,
             int&nbsp;y,
             int&nbsp;dx,
             int&nbsp;dy)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add a wall and a border/bound between to adjacent cells (x,y) and (x+dx,y+dy).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#areaOverlapsWithRoom(int, int, int, int)">areaOverlapsWithRoom</A></B>(int&nbsp;rx,
                     int&nbsp;ry,
                     int&nbsp;rxl,
                     int&nbsp;ryl)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks if there is a cell in the given area that belongs to a room.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#canGo(int, int, int, int)">canGo</A></B>(int&nbsp;x,
      int&nbsp;y,
      int&nbsp;dx,
      int&nbsp;dy)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checks if adjacent cells (x,y) and its neighbor (x+dx,y+dy) are not separated by a border 
 and (x+dx,y+dy) has not been visited before.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#deleteWall(int, int, int, int)">deleteWall</A></B>(int&nbsp;x,
           int&nbsp;y,
           int&nbsp;dx,
           int&nbsp;dy)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Delete a wall between to adjacent cells (x,y) and (x+dx,y+dy).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#getCells(int, int)">getCells</A></B>(int&nbsp;x,
         int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the value of cells</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#getMasks()">getMasks</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets hold of an internal array of length 4 with bitmasks for all directions: Right, Bottom, Left, Top</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#hasMaskedBitsFalse(int, int, int)">hasMaskedBitsFalse</A></B>(int&nbsp;x,
                   int&nbsp;y,
                   int&nbsp;bitmask)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#hasMaskedBitsGTZero(int, int, int)">hasMaskedBitsGTZero</A></B>(int&nbsp;x,
                    int&nbsp;y,
                    int&nbsp;bitmask)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#hasMaskedBitsTrue(int, int, int)">hasMaskedBitsTrue</A></B>(int&nbsp;x,
                  int&nbsp;y,
                  int&nbsp;bitmask)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#hasNoWallOnBottom(int, int)">hasNoWallOnBottom</A></B>(int&nbsp;x,
                  int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#hasNoWallOnLeft(int, int)">hasNoWallOnLeft</A></B>(int&nbsp;x,
                int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#hasNoWallOnRight(int, int)">hasNoWallOnRight</A></B>(int&nbsp;x,
                 int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#hasNoWallOnTop(int, int)">hasNoWallOnTop</A></B>(int&nbsp;x,
               int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#hasWallOnBottom(int, int)">hasWallOnBottom</A></B>(int&nbsp;x,
                int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#hasWallOnLeft(int, int)">hasWallOnLeft</A></B>(int&nbsp;x,
              int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#hasWallOnRight(int, int)">hasWallOnRight</A></B>(int&nbsp;x,
               int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#hasWallOnTop(int, int)">hasWallOnTop</A></B>(int&nbsp;x,
             int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#initialize()">initialize</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize maze such that all cells have not been visited (CW_VIRGIN), all walls are up (CW_ALL),
 and borders are set as a rectangle (CW_*_BOUND).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#isInRoom(int, int)">isInRoom</A></B>(int&nbsp;x,
         int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tells if InRoom flag is set for given cell</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#markAreaAsRoom(int, int, int, int, int, int, java.util.Random)">markAreaAsRoom</A></B>(int&nbsp;rw,
               int&nbsp;rh,
               int&nbsp;rx,
               int&nbsp;ry,
               int&nbsp;rxl,
               int&nbsp;ryl,
               java.util.Random&nbsp;r)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Marks a given area as a room on the maze and positions up to five doors randomly.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#saveLogFile(java.lang.String)">saveLogFile</A></B>(java.lang.String&nbsp;filename)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Write log data to given file</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#setAllToZero(int, int)">setAllToZero</A></B>(int&nbsp;x,
             int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets all wall bits to zero for a given cell and direction</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#setBitToOne(int, int, int)">setBitToOne</A></B>(int&nbsp;x,
            int&nbsp;y,
            int&nbsp;bitmask)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#setBitToZero(int, int, int)">setBitToZero</A></B>(int&nbsp;x,
             int&nbsp;y,
             int&nbsp;cw_bit)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sets given bit in to zero in given cell</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#setBoundAndWallToOne(int, int, int, int)">setBoundAndWallToOne</A></B>(int&nbsp;x,
                     int&nbsp;y,
                     int&nbsp;dx,
                     int&nbsp;dy)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the bound and wall bit to one for a given cell and direction</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#setBoundToZero(int, int, int, int)">setBoundToZero</A></B>(int&nbsp;x,
               int&nbsp;y,
               int&nbsp;dx,
               int&nbsp;dy)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the bound bit to zero for a given cell and direction</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#setInRoomToOne(int, int)">setInRoomToOne</A></B>(int&nbsp;x,
               int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the InRoom bit to one for a given cell and direction</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#setTopToOne(int, int)">setTopToOne</A></B>(int&nbsp;x,
            int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#setVirginToZero(int, int)">setVirginToZero</A></B>(int&nbsp;x,
                int&nbsp;y)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the virgin flag to zero for a given cell</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#setWallToZero(int, int, int, int)">setWallToZero</A></B>(int&nbsp;x,
              int&nbsp;y,
              int&nbsp;dx,
              int&nbsp;dy)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the wall bit to zero for a given cell and direction</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../falstad/Cells.html#toString()">toString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Methods dumps internal data into a string, intended usage is for debugging purposes.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>equals, getClass, hashCode, notify, notifyAll, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="Cells(int, int)"><!-- --></A><H3>
Cells</H3>
<PRE>
public <B>Cells</B>(int&nbsp;w,
             int&nbsp;h)</PRE>
<DL>
<DD>Constructor
<P>
</DL>
<HR>

<A NAME="Cells(int[][])"><!-- --></A><H3>
Cells</H3>
<PRE>
public <B>Cells</B>(int[][]&nbsp;target)</PRE>
<DL>
<DD>Constructor that dimensions and initializes cells with the values from the given matrix.
<P>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getCells(int, int)"><!-- --></A><H3>
getCells</H3>
<PRE>
public int <B>getCells</B>(int&nbsp;x,
                    int&nbsp;y)</PRE>
<DL>
<DD>Get the value of cells
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getMasks()"><!-- --></A><H3>
getMasks</H3>
<PRE>
public static int[] <B>getMasks</B>()</PRE>
<DL>
<DD>Gets hold of an internal array of length 4 with bitmasks for all directions: Right, Bottom, Left, Top
<P>
<DD><DL>

<DT><B>Returns:</B><DD>array of bitmasks</DL>
</DD>
</DL>
<HR>

<A NAME="canGo(int, int, int, int)"><!-- --></A><H3>
canGo</H3>
<PRE>
public boolean <B>canGo</B>(int&nbsp;x,
                     int&nbsp;y,
                     int&nbsp;dx,
                     int&nbsp;dy)</PRE>
<DL>
<DD>checks if adjacent cells (x,y) and its neighbor (x+dx,y+dy) are not separated by a border 
 and (x+dx,y+dy) has not been visited before.
 This method is used in the MazeBuilder class.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - coordinate of cell<DD><CODE>y</CODE> - coordinate of cell<DD><CODE>dx</CODE> - direction x, in { -1, 0, 1} obtained from dirsx[]<DD><CODE>dy</CODE> - direction y, in { -1, 0, 1} obtained from dirsy[]
<DT><B>Returns:</B><DD>true if neighbor at (x+dx,y+dy) is new and wall can be taken down, false otherwise</DL>
</DD>
</DL>
<HR>

<A NAME="setBitToZero(int, int, int)"><!-- --></A><H3>
setBitToZero</H3>
<PRE>
public void <B>setBitToZero</B>(int&nbsp;x,
                         int&nbsp;y,
                         int&nbsp;cw_bit)</PRE>
<DL>
<DD>sets given bit in to zero in given cell
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - <DD><CODE>y</CODE> - <DD><CODE>cw_bit</CODE> - like CW_LEFT, CW_RIGHT, CW_TOP, CW_BOTTOM</DL>
</DD>
</DL>
<HR>

<A NAME="setAllToZero(int, int)"><!-- --></A><H3>
setAllToZero</H3>
<PRE>
public void <B>setAllToZero</B>(int&nbsp;x,
                         int&nbsp;y)</PRE>
<DL>
<DD>Sets all wall bits to zero for a given cell and direction
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - <DD><CODE>y</CODE> - <DD><CODE>dx</CODE> - <DD><CODE>dy</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="setVirginToZero(int, int)"><!-- --></A><H3>
setVirginToZero</H3>
<PRE>
public void <B>setVirginToZero</B>(int&nbsp;x,
                            int&nbsp;y)</PRE>
<DL>
<DD>Sets the virgin flag to zero for a given cell
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - <DD><CODE>y</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="setWallToZero(int, int, int, int)"><!-- --></A><H3>
setWallToZero</H3>
<PRE>
public void <B>setWallToZero</B>(int&nbsp;x,
                          int&nbsp;y,
                          int&nbsp;dx,
                          int&nbsp;dy)</PRE>
<DL>
<DD>Sets the wall bit to zero for a given cell and direction
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - <DD><CODE>y</CODE> - <DD><CODE>dx</CODE> - <DD><CODE>dy</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="setBoundToZero(int, int, int, int)"><!-- --></A><H3>
setBoundToZero</H3>
<PRE>
public void <B>setBoundToZero</B>(int&nbsp;x,
                           int&nbsp;y,
                           int&nbsp;dx,
                           int&nbsp;dy)</PRE>
<DL>
<DD>Sets the bound bit to zero for a given cell and direction
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - <DD><CODE>y</CODE> - <DD><CODE>dx</CODE> - <DD><CODE>dy</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="setBitToOne(int, int, int)"><!-- --></A><H3>
setBitToOne</H3>
<PRE>
public void <B>setBitToOne</B>(int&nbsp;x,
                        int&nbsp;y,
                        int&nbsp;bitmask)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setBoundAndWallToOne(int, int, int, int)"><!-- --></A><H3>
setBoundAndWallToOne</H3>
<PRE>
public void <B>setBoundAndWallToOne</B>(int&nbsp;x,
                                 int&nbsp;y,
                                 int&nbsp;dx,
                                 int&nbsp;dy)</PRE>
<DL>
<DD>Sets the bound and wall bit to one for a given cell and direction
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - <DD><CODE>y</CODE> - <DD><CODE>dx</CODE> - <DD><CODE>dy</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="setInRoomToOne(int, int)"><!-- --></A><H3>
setInRoomToOne</H3>
<PRE>
public void <B>setInRoomToOne</B>(int&nbsp;x,
                           int&nbsp;y)</PRE>
<DL>
<DD>Sets the InRoom bit to one for a given cell and direction
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - <DD><CODE>y</CODE> - <DD><CODE>dx</CODE> - <DD><CODE>dy</CODE> - </DL>
</DD>
</DL>
<HR>

<A NAME="setTopToOne(int, int)"><!-- --></A><H3>
setTopToOne</H3>
<PRE>
public void <B>setTopToOne</B>(int&nbsp;x,
                        int&nbsp;y)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="initialize()"><!-- --></A><H3>
initialize</H3>
<PRE>
public void <B>initialize</B>()</PRE>
<DL>
<DD>Initialize maze such that all cells have not been visited (CW_VIRGIN), all walls are up (CW_ALL),
 and borders are set as a rectangle (CW_*_BOUND).
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="areaOverlapsWithRoom(int, int, int, int)"><!-- --></A><H3>
areaOverlapsWithRoom</H3>
<PRE>
public boolean <B>areaOverlapsWithRoom</B>(int&nbsp;rx,
                                    int&nbsp;ry,
                                    int&nbsp;rxl,
                                    int&nbsp;ryl)</PRE>
<DL>
<DD>Checks if there is a cell in the given area that belongs to a room.
 The first corner is at the upper left position, the second corner is at the lower right position.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>rx</CODE> - 1st corner, x coordinate<DD><CODE>ry</CODE> - 1st corner, y coordinate<DD><CODE>rxl</CODE> - 2nd corner, x coordinate<DD><CODE>ryl</CODE> - 2nd corner, y coordinate</DL>
</DD>
</DL>
<HR>

<A NAME="addBoundWall(int, int, int, int)"><!-- --></A><H3>
addBoundWall</H3>
<PRE>
public void <B>addBoundWall</B>(int&nbsp;x,
                         int&nbsp;y,
                         int&nbsp;dx,
                         int&nbsp;dy)</PRE>
<DL>
<DD>Add a wall and a border/bound between to adjacent cells (x,y) and (x+dx,y+dy).
 Only used in markAreaAsRoom.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - coordinate of cell<DD><CODE>y</CODE> - coordinate of cell<DD><CODE>dx</CODE> - direction x, in { -1, 0, 1} obtained from dirsx[]<DD><CODE>dy</CODE> - direction y, in { -1, 0, 1} obtained from dirsy[]</DL>
</DD>
</DL>
<HR>

<A NAME="deleteWall(int, int, int, int)"><!-- --></A><H3>
deleteWall</H3>
<PRE>
public void <B>deleteWall</B>(int&nbsp;x,
                       int&nbsp;y,
                       int&nbsp;dx,
                       int&nbsp;dy)</PRE>
<DL>
<DD>Delete a wall between to adjacent cells (x,y) and (x+dx,y+dy).
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - coordinate of cell<DD><CODE>y</CODE> - coordinate of cell<DD><CODE>dx</CODE> - direction x, in { -1, 0, 1} obtained from dirsx[]<DD><CODE>dy</CODE> - direction y, in { -1, 0, 1} obtained from dirsy[]</DL>
</DD>
</DL>
<HR>

<A NAME="markAreaAsRoom(int, int, int, int, int, int, java.util.Random)"><!-- --></A><H3>
markAreaAsRoom</H3>
<PRE>
public void <B>markAreaAsRoom</B>(int&nbsp;rw,
                           int&nbsp;rh,
                           int&nbsp;rx,
                           int&nbsp;ry,
                           int&nbsp;rxl,
                           int&nbsp;ryl,
                           java.util.Random&nbsp;r)</PRE>
<DL>
<DD>Marks a given area as a room on the maze and positions up to five doors randomly.
 The first corner is at the upper left position, the second corner is at the lower right position.
 Assumes that given area is located on the map and does not intersect with any existing room.
 The walls of a room are declared as borders to prevent the generation mechanism from tearing them down.
 Of course there must be a few segments where doors can be created so the border protection is removed there.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>rw</CODE> - room width<DD><CODE>rh</CODE> - room height<DD><CODE>rx</CODE> - 1st corner, x coordinate<DD><CODE>ry</CODE> - 1st corner, y coordinate<DD><CODE>rxl</CODE> - 2nd corner, x coordinate<DD><CODE>ryl</CODE> - 2nd corner, y coordinate<DD><CODE>r</CODE> - random number stream to obtain values for door positions</DL>
</DD>
</DL>
<HR>

<A NAME="hasMaskedBitsTrue(int, int, int)"><!-- --></A><H3>
hasMaskedBitsTrue</H3>
<PRE>
public boolean <B>hasMaskedBitsTrue</B>(int&nbsp;x,
                                 int&nbsp;y,
                                 int&nbsp;bitmask)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isInRoom(int, int)"><!-- --></A><H3>
isInRoom</H3>
<PRE>
public boolean <B>isInRoom</B>(int&nbsp;x,
                        int&nbsp;y)</PRE>
<DL>
<DD>tells if InRoom flag is set for given cell
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>x</CODE> - <DD><CODE>y</CODE> - 
<DT><B>Returns:</B><DD></DL>
</DD>
</DL>
<HR>

<A NAME="hasWallOnRight(int, int)"><!-- --></A><H3>
hasWallOnRight</H3>
<PRE>
public boolean <B>hasWallOnRight</B>(int&nbsp;x,
                              int&nbsp;y)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="hasWallOnLeft(int, int)"><!-- --></A><H3>
hasWallOnLeft</H3>
<PRE>
public boolean <B>hasWallOnLeft</B>(int&nbsp;x,
                             int&nbsp;y)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="hasWallOnTop(int, int)"><!-- --></A><H3>
hasWallOnTop</H3>
<PRE>
public boolean <B>hasWallOnTop</B>(int&nbsp;x,
                            int&nbsp;y)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="hasWallOnBottom(int, int)"><!-- --></A><H3>
hasWallOnBottom</H3>
<PRE>
public boolean <B>hasWallOnBottom</B>(int&nbsp;x,
                               int&nbsp;y)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="hasNoWallOnBottom(int, int)"><!-- --></A><H3>
hasNoWallOnBottom</H3>
<PRE>
public boolean <B>hasNoWallOnBottom</B>(int&nbsp;x,
                                 int&nbsp;y)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="hasNoWallOnTop(int, int)"><!-- --></A><H3>
hasNoWallOnTop</H3>
<PRE>
public boolean <B>hasNoWallOnTop</B>(int&nbsp;x,
                              int&nbsp;y)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="hasNoWallOnLeft(int, int)"><!-- --></A><H3>
hasNoWallOnLeft</H3>
<PRE>
public boolean <B>hasNoWallOnLeft</B>(int&nbsp;x,
                               int&nbsp;y)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="hasNoWallOnRight(int, int)"><!-- --></A><H3>
hasNoWallOnRight</H3>
<PRE>
public boolean <B>hasNoWallOnRight</B>(int&nbsp;x,
                                int&nbsp;y)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="hasMaskedBitsFalse(int, int, int)"><!-- --></A><H3>
hasMaskedBitsFalse</H3>
<PRE>
public boolean <B>hasMaskedBitsFalse</B>(int&nbsp;x,
                                  int&nbsp;y,
                                  int&nbsp;bitmask)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="hasMaskedBitsGTZero(int, int, int)"><!-- --></A><H3>
hasMaskedBitsGTZero</H3>
<PRE>
public boolean <B>hasMaskedBitsGTZero</B>(int&nbsp;x,
                                   int&nbsp;y,
                                   int&nbsp;bitmask)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="toString()"><!-- --></A><H3>
toString</H3>
<PRE>
public java.lang.String <B>toString</B>()</PRE>
<DL>
<DD>Methods dumps internal data into a string, intended usage is for debugging purposes. 
 Maze is represent as a matrix of integer values.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE>toString</CODE> in class <CODE>java.lang.Object</CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="saveLogFile(java.lang.String)"><!-- --></A><H3>
saveLogFile</H3>
<PRE>
public void <B>saveLogFile</B>(java.lang.String&nbsp;filename)</PRE>
<DL>
<DD>Write log data to given file
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>filename</CODE> - </DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../falstad/package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/Cells.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../falstad/BSPNode.html" title="class in falstad"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../falstad/FirstPersonDrawer.html" title="class in falstad"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?falstad/Cells.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Cells.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
